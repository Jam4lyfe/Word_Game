{"ast":null,"code":"var _jsxFileName = \"/Users/james/Desktop/Word_Game/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst emotions = [\"Happy\", \"Sad\", \"Angry\", \"Surprised\", \"Excited\", \"Fearful\", \"Relaxed\", \"Confused\"];\nconst App = () => {\n  _s();\n  const [currentEmotion, setCurrentEmotion] = useState('');\n  const [options, setOptions] = useState([]);\n  useEffect(() => {\n    startGame();\n  }, []); // Run once on component mount\n\n  const startGame = () => {\n    // Choose a random emotion\n    const newEmotion = emotions[Math.floor(Math.random() * emotions.length)];\n    setCurrentEmotion(newEmotion);\n\n    // Generate three random emotions for options\n    const newOptions = generateRandomOptions(newEmotion);\n    setOptions(newOptions);\n  };\n  const generateRandomOptions = correctEmotion => {\n    const newOptions = [];\n    while (newOptions.length < 3) {\n      const randomEmotion = emotions[Math.floor(Math.random() * emotions.length)];\n      if (randomEmotion !== correctEmotion && !newOptions.includes(randomEmotion)) {\n        newOptions.push(randomEmotion);\n      }\n    }\n    newOptions.push(correctEmotion); // Add the correct emotion to options\n    return shuffleArray(newOptions);\n  };\n  const shuffleArray = array => {\n    // Fisher-Yates shuffle algorithm\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  };\n  const checkAnswer = selectedEmotion => {\n    if (selectedEmotion === currentEmotion) {\n      alert(\"Correct! Let's try another one.\");\n      startGame();\n    } else {\n      alert(\"Incorrect. Try again!\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Word Association Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"emotion-word\",\n      children: currentEmotion\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"options\",\n      children: options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => checkAnswer(option),\n        children: option\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"qupRwxuM9CyOiJE4U5uH58hi4TM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","emotions","App","_s","currentEmotion","setCurrentEmotion","options","setOptions","startGame","newEmotion","Math","floor","random","length","newOptions","generateRandomOptions","correctEmotion","randomEmotion","includes","push","shuffleArray","array","i","j","checkAnswer","selectedEmotion","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","map","option","index","onClick","_c","$RefreshReg$"],"sources":["/Users/james/Desktop/Word_Game/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nconst emotions = [\n  \"Happy\", \"Sad\", \"Angry\", \"Surprised\", \"Excited\", \"Fearful\", \"Relaxed\", \"Confused\"\n];\n\nconst App = () => {\n  const [currentEmotion, setCurrentEmotion] = useState('');\n  const [options, setOptions] = useState([]);\n\n  useEffect(() => {\n    startGame();\n  }, []); // Run once on component mount\n\n  const startGame = () => {\n    // Choose a random emotion\n    const newEmotion = emotions[Math.floor(Math.random() * emotions.length)];\n    setCurrentEmotion(newEmotion);\n\n    // Generate three random emotions for options\n    const newOptions = generateRandomOptions(newEmotion);\n    setOptions(newOptions);\n  };\n\n  const generateRandomOptions = (correctEmotion) => {\n    const newOptions = [];\n    \n    while (newOptions.length < 3) {\n      const randomEmotion = emotions[Math.floor(Math.random() * emotions.length)];\n      if (randomEmotion !== correctEmotion && !newOptions.includes(randomEmotion)) {\n        newOptions.push(randomEmotion);\n      }\n    }\n\n    newOptions.push(correctEmotion); // Add the correct emotion to options\n    return shuffleArray(newOptions);\n  };\n\n  const shuffleArray = (array) => {\n    // Fisher-Yates shuffle algorithm\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  };\n\n  const checkAnswer = (selectedEmotion) => {\n    if (selectedEmotion === currentEmotion) {\n      alert(\"Correct! Let's try another one.\");\n      startGame();\n    } else {\n      alert(\"Incorrect. Try again!\");\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Word Association Game</h1>\n      <p id=\"emotion-word\">{currentEmotion}</p>\n      <div id=\"options\">\n        {options.map((option, index) => (\n          <button key={index} onClick={() => checkAnswer(option)}>\n            {option}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}