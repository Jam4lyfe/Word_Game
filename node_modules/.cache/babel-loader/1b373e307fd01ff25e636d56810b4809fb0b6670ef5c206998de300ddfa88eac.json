{"ast":null,"code":"var _jsxFileName = \"/Users/james/Desktop/Word_Game/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst emotions = [\"Happy\", \"Sad\", \"Excited\", \"Angry\", \"Surprised\", \"Calm\", \"Frustrated\", \"Confused\"];\nconst App = () => {\n  _s();\n  const [currentWord, setCurrentWord] = useState('');\n  const [options, setOptions] = useState([]);\n  useEffect(() => {\n    startGame();\n  }, []); // Run once when the component mounts\n\n  const startGame = () => {\n    const randomWord = emotions[Math.floor(Math.random() * emotions.length)];\n    setCurrentWord(randomWord);\n    const synonymOptions = getSynonymOptions(randomWord).sort(() => Math.random() - 0.5);\n    setOptions(synonymOptions);\n  };\n  const getSynonymOptions = word => {\n    // In a real game, you would fetch synonyms from an external source or API.\n    // For simplicity, we'll use a static list here.\n    const synonymList = {\n      \"Happy\": [\"Joyful\", \"Content\", \"Cheerful\"],\n      \"Sad\": [\"Unhappy\", \"Melancholy\", \"Depressed\"]\n      // Add synonyms for other emotions\n    };\n    return synonymList[word].slice(0, 3);\n  };\n  const checkAnswer = selectedOption => {\n    const userAnswer = options[selectedOption];\n    if (userAnswer === currentWord) {\n      alert(\"Correct! Move on to the next word.\");\n      startGame();\n    } else {\n      alert(\"Incorrect. Try again.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Word Association Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"current-word\",\n      children: currentWord\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"options-container\",\n      children: options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => checkAnswer(index),\n        children: option\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"GgNJyAZ2lLGO24RFncyE+2apWUA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","emotions","App","_s","currentWord","setCurrentWord","options","setOptions","startGame","randomWord","Math","floor","random","length","synonymOptions","getSynonymOptions","sort","word","synonymList","slice","checkAnswer","selectedOption","userAnswer","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","map","option","index","onClick","_c","$RefreshReg$"],"sources":["/Users/james/Desktop/Word_Game/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nconst emotions = [\"Happy\", \"Sad\", \"Excited\", \"Angry\", \"Surprised\", \"Calm\", \"Frustrated\", \"Confused\"];\n\nconst App = () => {\n  const [currentWord, setCurrentWord] = useState('');\n  const [options, setOptions] = useState([]);\n\n  useEffect(() => {\n    startGame();\n  }, []); // Run once when the component mounts\n\n  const startGame = () => {\n    const randomWord = emotions[Math.floor(Math.random() * emotions.length)];\n    setCurrentWord(randomWord);\n\n    const synonymOptions = getSynonymOptions(randomWord).sort(() => Math.random() - 0.5);\n    setOptions(synonymOptions);\n  };\n\n  const getSynonymOptions = (word) => {\n    // In a real game, you would fetch synonyms from an external source or API.\n    // For simplicity, we'll use a static list here.\n    const synonymList = {\n      \"Happy\": [\"Joyful\", \"Content\", \"Cheerful\"],\n      \"Sad\": [\"Unhappy\", \"Melancholy\", \"Depressed\"],\n      // Add synonyms for other emotions\n    };\n\n    return synonymList[word].slice(0, 3);\n  };\n\n  const checkAnswer = (selectedOption) => {\n    const userAnswer = options[selectedOption];\n\n    if (userAnswer === currentWord) {\n      alert(\"Correct! Move on to the next word.\");\n      startGame();\n    } else {\n      alert(\"Incorrect. Try again.\");\n    }\n  };\n\n  return (\n    <div className=\"game-container\">\n      <h1>Word Association Game</h1>\n      <p id=\"current-word\">{currentWord}</p>\n      <div id=\"options-container\">\n        {options.map((option, index) => (\n          <button key={index} onClick={() => checkAnswer(index)}>{option}</button>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}